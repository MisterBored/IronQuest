package com.darrenswhite.rs.ironquest.path.algorithm;

import com.darrenswhite.rs.ironquest.player.QuestPriority;
import java.util.Map;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

class DefaultAlgorithmTest extends PathFinderAlgorithmTest {

  static final DefaultAlgorithm algorithm = new DefaultAlgorithm();

  @Nested
  @TestInstance(TestInstance.Lifecycle.PER_CLASS)
  class GetQuestComparator {

    @Test
    void shouldReturnCorrectQuestOrderGivenNoPriorities() {
      assertQuestOrder(algorithm, NO_REQUIREMENTS_HIGH_REWARDS_NAME,
          NO_REQUIREMENTS_MEDIUM_REWARDS_NAME, NO_REQUIREMENTS_LOW_REWARDS_NAME,
          NO_REQUIREMENTS_NO_REWARDS_NAME, LOW_REQUIREMENTS_LOW_REWARDS_NAME,
          LOW_REQUIREMENTS_NO_REWARDS_NAME, MEDIUM_REQUIREMENTS_MEDIUM_REWARDS_NAME,
          MEDIUM_REQUIREMENTS_NO_REWARDS_NAME, HIGH_REQUIREMENTS_HIGH_REWARDS_NAME,
          HIGH_REQUIREMENTS_NO_REWARDS_NAME);
    }

    @Test
    void shouldReturnMaximumPriorityQuestFirst() {
      assertQuestOrder(algorithm, Map.of(HIGH_REQUIREMENTS_NO_REWARDS_NAME, QuestPriority.MAXIMUM),
          HIGH_REQUIREMENTS_NO_REWARDS_NAME, NO_REQUIREMENTS_HIGH_REWARDS_NAME,
          NO_REQUIREMENTS_MEDIUM_REWARDS_NAME, NO_REQUIREMENTS_LOW_REWARDS_NAME,
          NO_REQUIREMENTS_NO_REWARDS_NAME, LOW_REQUIREMENTS_LOW_REWARDS_NAME,
          LOW_REQUIREMENTS_NO_REWARDS_NAME, MEDIUM_REQUIREMENTS_MEDIUM_REWARDS_NAME,
          MEDIUM_REQUIREMENTS_NO_REWARDS_NAME, HIGH_REQUIREMENTS_HIGH_REWARDS_NAME);
    }

    @Test
    void shouldReturnMinimumPriorityQuestLast() {
      assertQuestOrder(algorithm, Map.of(NO_REQUIREMENTS_HIGH_REWARDS_NAME, QuestPriority.MINIMUM),
          NO_REQUIREMENTS_MEDIUM_REWARDS_NAME, NO_REQUIREMENTS_LOW_REWARDS_NAME,
          NO_REQUIREMENTS_NO_REWARDS_NAME, LOW_REQUIREMENTS_LOW_REWARDS_NAME,
          LOW_REQUIREMENTS_NO_REWARDS_NAME, MEDIUM_REQUIREMENTS_MEDIUM_REWARDS_NAME,
          MEDIUM_REQUIREMENTS_NO_REWARDS_NAME, HIGH_REQUIREMENTS_HIGH_REWARDS_NAME,
          HIGH_REQUIREMENTS_NO_REWARDS_NAME, NO_REQUIREMENTS_HIGH_REWARDS_NAME);
    }

    @Test
    void shouldReturnPriorityQuestsInDescendingOrder() {
      assertQuestOrder(algorithm, Map.of(LOW_REQUIREMENTS_LOW_REWARDS_NAME, QuestPriority.MINIMUM,
          LOW_REQUIREMENTS_NO_REWARDS_NAME, QuestPriority.LOW,
          MEDIUM_REQUIREMENTS_MEDIUM_REWARDS_NAME, QuestPriority.HIGH,
          MEDIUM_REQUIREMENTS_NO_REWARDS_NAME, QuestPriority.MAXIMUM),
          MEDIUM_REQUIREMENTS_NO_REWARDS_NAME, MEDIUM_REQUIREMENTS_MEDIUM_REWARDS_NAME,
          NO_REQUIREMENTS_HIGH_REWARDS_NAME, NO_REQUIREMENTS_MEDIUM_REWARDS_NAME,
          NO_REQUIREMENTS_LOW_REWARDS_NAME, NO_REQUIREMENTS_NO_REWARDS_NAME,
          HIGH_REQUIREMENTS_HIGH_REWARDS_NAME, HIGH_REQUIREMENTS_NO_REWARDS_NAME,
          LOW_REQUIREMENTS_NO_REWARDS_NAME, LOW_REQUIREMENTS_LOW_REWARDS_NAME);
    }
  }
}
